openapi: 3.0.1
info:
  title: Product API
  version: 1.0.0
paths:
  /products/{product_id}:
    get:
      tags:
        - productController
      summary: Some summary
      operationId: getProductById
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: returns the current product's details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products:
    get:
      tags:
        - productController
      summary: Some summary
      operationId: getAllProducts
      responses:
        '200':
          description: returns all products' details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
components:
  schemas:
    Product:
      type: object
      required:
        - name
        - brand
        - description
        - imageUrl
        - size
        - gender
        - colour
        - category
        - price
        - stockQuantity
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        name:
          type: string
        brand:
          type: string
        description:
          type: string
        imageUrl:
          type: array
          items:
            type: string
            format: uri
            example: "https://example.com/images/jordan1.png"
        size:
          type: string
          enum: [ EU_25, EU_26, EU_27, EU_28, EU_29, EU_30, EU_31, EU_32, EU_33, EU_34, EU_35, EU_36, EU_37, EU_38, EU_39, EU_40, EU_41, EU_42, EU_43, EU_44, EU_45 ]
        gender:
          type: string
          enum: [ MEN, WOMEN, KIDS ]
        colour:
          type: string
        category:
          type: string
          enum: [ SNEAKERS, BOOTS, SANDALS, SLIPPERS, HEELS ]
        price:
          type: number
          format: double
        discount:
          type: number
          format: double
          example: 10.0
        discountedPrice:
          type: number
          format: double
          example: 89.99
        stockQuantity:
          type: integer
